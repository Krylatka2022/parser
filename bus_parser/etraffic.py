# import re
# import time
# from playwright.sync_api import sync_playwright, TimeoutError
# from datetime import datetime
#
# # --- –°–ª–æ–≤–∞—Ä—å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
# DEPOT_SLUGS = {
#     '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'spb',
#     '–º–æ—Å–∫–≤–∞': 'moscow',
#     # '–≤—ã–±–æ—Ä–≥': #–Ω–µ—Ç slug
#     '–ø—Å–∫–æ–≤': 'pskov',
#     '–º—É—Ä–º–∞–Ω—Å–∫': 'murmansk',
#     '–∫–∞–∑–∞–Ω—å': 'kazan',
#     '—Å–æ—á–∏': 'sochi',
#     '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 'rostov-na-donu',
#     '–∫–∏—Ä–∏—à–∏': 'kirishi',
#     '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 'ekaterinburg',
#     '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 'novosibirsk-all',
#     '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 'krasnodar',
#     '—É—Ñ–∞': 'ufa',
#     '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 'krasnoyarsk-all',
#     '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 'vladivostok',
#     '—Ä—ã–±–∏–Ω—Å–∫': 'rybinsk',
#     '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 'v-novgorod-sksavto',
#     # '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': #–Ω–µ—Ç slug
#     '—Ä—ã–±–∏–Ω—Å–∫': 'rybinsk',
#     '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 'volgograd',
#     '–≤–æ—Ä–æ–Ω–µ–∂': 'voronezh',
#     '—Å–º–æ–ª–µ–Ω—Å–∫': 'smolensk',
#     '–±—Ä—è–Ω—Å–∫': 'braynsk',
#     '–≤–µ—Å—å–µ–≥–æ–Ω—Å–∫': 'vesiegonsk',
#     '–∫–æ—Å—Ç—Ä–æ–º–∞': 'kostroma',
#     '—è—Ä–æ—Å–ª–∞–≤–ª—å': 'yaroslavl',
#     '–ø—Å–∫–æ–≤': 'pskov',
#     '–º—É—Ä–º–∞–Ω—Å–∫': 'murmansk',
# }
#
# # --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –°–õ–û–í–ê–†–¨: ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ ---
# # –ö–ª—é—á ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî ID –Ω–∞ e-traffic.ru
# # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–∫—É–¥–∞" –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
# CITY_TO_STATION_ID = {
#     '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 128713,
#     '–º–æ—Å–∫–≤–∞': 5107,
#     '–∫–∞–∑–∞–Ω—å': 85833, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '—Å–æ—á–∏': 42622, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 3536,
#     '–∫–∏—Ä–∏—à–∏': 0, # –ù–µ—Ç –Ω–∞ e-traffic –∏–∑ –ú–æ—Å–∫–≤—ã –∏ –°–ü–±
#     '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 0,  # –ù–µ—Ç –Ω–∞ e-traffic –∏–∑ –ú–æ—Å–∫–≤—ã –∏ –°–ü–±
#     '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 0,   # –ù–µ—Ç –Ω–∞ e-traffic
#     '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 131120, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '—É—Ñ–∞': 8972, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 0,    # –ù–µ—Ç –Ω–∞ e-traffic
#     '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 0,   # –ù–µ—Ç –Ω–∞ e-traffic
#     '—Ä—ã–±–∏–Ω—Å–∫': 57765, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 22937, # —Ç–æ–ª—å–∫–æ –∏–∑ –°–ü–± –Ω–∞ e-traffic
#     '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 125662, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 41054, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '–≤–æ—Ä–æ–Ω–µ–∂': 86502, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '—Å–º–æ–ª–µ–Ω—Å–∫': 32828,
#     '–±—Ä—è–Ω—Å–∫': 83646, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '–≤–µ—Å—å–µ–≥–æ–Ω—Å–∫': 74988,
#     '–∫–æ—Å—Ç—Ä–æ–º–∞': 54300, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '—è—Ä–æ—Å–ª–∞–≤–ª—å': 3298, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
#     '–ø—Å–∫–æ–≤': 73707,
#     '–º—É—Ä–º–∞–Ω—Å–∫': 118744, # —Ç–æ–ª—å–∫–æ –∏–∑ –ö–∏—Ä–∫–µ–Ω–µ—Å –Ω–∞ e-traffic
# }
# def normalize_city_name(name: str) -> str:
#     cleaned = re.split(r'\s*[*]+', name.strip())[0].lower()
#     replacements = {
#         '—Å–ø–±': '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
#         '–º—Å–∫': '–º–æ—Å–∫–≤–∞',
#         '–Ω.–Ω–æ–≤–≥–æ—Ä–æ–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
#         '–Ω–∏–∂–Ω–∏–π –Ω-–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
#     }
#     return replacements.get(cleaned, cleaned)
#
# def parse_e_traffic(date: str, from_city: str, to_city: str) -> list[dict]:
#     results = []
#     from_city_norm = normalize_city_name(from_city)
#     to_city_norm = normalize_city_name(to_city)
#
#     depot_slug = DEPOT_SLUGS.get(from_city_norm)
#     if not depot_slug:
#         print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω slug –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {from_city}")
#         return results
#
#      # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "–∫—É–¥–∞"
#     station_id = CITY_TO_STATION_ID.get(to_city_norm)
#     if not station_id:
#         print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {to_city}")
#         print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {list(CITY_TO_STATION_ID.keys())}")
#         return results
#
#     if station_id == 0:
#         print(f"‚ÑπÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {from_city} ‚Üí {to_city} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ e-traffic.ru")
#         return results
#
#     try:
#         dt = datetime.strptime(date, "%Y-%m-%d")
#         formatted_date = dt.strftime("%d.%m.%Y")
#     except ValueError:
#         print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}")
#         return results
#
#     url = f"https://e-traffic.ru/depot/{depot_slug}/{station_id}/{formatted_date}"
#     print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {url}")
#
#     with sync_playwright() as p:
#         browser = p.chromium.launch(headless=False, slow_mo=500)
#         context = browser.new_context(
#             viewport={"width": 1920, "height": 1080},
#             user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
#             locale="ru-RU"
#         )
#         page = context.new_page()
#
#         try:
#             # --- –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL ---
#             page.goto(url, wait_until="networkidle")
#             print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
#
#             # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
#             # with open("debug_e_traffic_pre_wait.html", "w", encoding="utf-8") as f:
#             #     f.write(page.content())
#
#             # --- –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ —Å —Ä–µ–π—Å–∞–º–∏ ---
#             print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–π—Å–æ–≤...")
#             max_wait = 30
#             for _ in range(max_wait):
#                 rows = page.query_selector_all("div.grid-row.row")
#                 if len(rows) > 0:
#                     print("‚úÖ –†–µ–π—Å—ã –Ω–∞–π–¥–µ–Ω—ã")
#                     break
#                 if page.locator("text=–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã").is_visible():
#                     print("‚ÑπÔ∏è –†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.")
#                     browser.close()
#                     return results
#                 time.sleep(1)
#             else:
#                 print("‚ùå –†–µ–π—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
#                 # with open("debug_e_traffic_failed.html", "w", encoding="utf-8") as f:
#                 #     f.write(page.content())
#                 browser.close()
#                 return results
#
#             # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
#             rows = page.query_selector_all("div.grid-row.row")
#             print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Ä–µ–π—Å–æ–≤")
#
#             for row in rows:
#                 try:
#                     # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#                     time_elem = row.query_selector("div.dispatch .time")
#                     time_text = time_elem.inner_text().strip() if time_elem else "N/A"
#
#                     if time_text == "N/A":
#                         continue
#
#                     # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ (–≤ —Ç–µ–≥–µ <strong> –≤–Ω—É—Ç—Ä–∏ .route)
#                     trip_number_elem = row.query_selector("div.route strong")
#                     trip_number = trip_number_elem.inner_text().strip() if trip_number_elem else "N/A"
#
#                     # –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫
#                     carrier_elem = row.query_selector("div.carrier.info")
#                     carrier_text = carrier_elem.inner_text().strip() if carrier_elem else "N/A"
#                     if "–ò–ù–ù:" in carrier_text:
#                         carrier_text = carrier_text.split("–ò–ù–ù:")[0].strip().rstrip(",")
#
#                     # –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ (–≤ –±–ª–æ–∫–µ .bus.info)
#                     bus_info_elem = row.query_selector("div.bus.info")
#                     bus_info_text = bus_info_elem.inner_text().strip() if bus_info_elem else ""
#                     free_seats = "N/A"
#                     free_match = re.search(r'—Å–≤–æ–±–æ–¥–Ω–æ:\s*(\d+\+?|\d+)', bus_info_text, re.IGNORECASE)
#                     if free_match:
#                         free_seats = free_match.group(1)
#                     elif "–Ω–µ—Ç –º–µ—Å—Ç" in bus_info_text.lower() or "0" in bus_info_text:
#                         free_seats = "0"
#
#                     # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
#                     total_seats = "N/A"
#                     total_match = re.search(r'–ú–µ—Å—Ç:\s*(\d+)', bus_info_text, re.IGNORECASE)
#                     if total_match:
#                         total_seats = total_match.group(1)
#                     else:
#                         # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ–±—É—Å 51 –º–µ—Å—Ç–æ"
#                         total_match = re.search(r'–ê–≤—Ç–æ–±—É—Å\s*(\d+)\s*–º–µ—Å—Ç', bus_info_text, re.IGNORECASE)
#                         if total_match:
#                             total_seats = total_match.group(1)
#
#                     # –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
#                     sold_tickets = "N/A"
#                     if total_seats.isdigit() and free_seats.isdigit():
#                         sold_tickets = str(int(total_seats) - int(free_seats))
#
#                     # –¶–µ–Ω–∞
#                     price_elem = row.query_selector("div.prices .price")
#                     price_text = price_elem.inner_text().strip() if price_elem else "0"
#                     price_digits = ''.join(filter(str.isdigit, price_text))
#                     price = float(price_digits) if price_digits else 0.0
#
#                     results.append({
#                         'time': time_text,
#                         'trip_number': trip_number,
#                         'departure_point': from_city,
#                         'arrival_point': to_city,
#                         'carrier': carrier_text,
#                         'total_seats': total_seats,
#                         'free_seats': free_seats,
#                         'sold_tickets': sold_tickets,
#                         'price': price,
#                         'source': 'e-traffic'
#                     })
#
#                 except Exception as e:
#                     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏: {e}")
#                     continue
#
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Playwright: {e}")
#         finally:
#             browser.close()
#
#
#         # --- –°–û–•–†–ê–ù–ï–ù–ò–ï –í EXCEL ---
#         if results:
#             try:
#                 from utils.save_to_excel import save_to_excel
#                 excel_filename = "data/history.xlsx"
#                 save_to_excel(results, filename=excel_filename, search_date=date)
#                 print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {excel_filename}")
#             except Exception as e:
#                 print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")
#
#         print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ e-traffic –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–π—Å–æ–≤.")
#         return results

import re
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã Selenium
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException
from webdriver_manager.chrome import ChromeDriverManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
try:
    from utils.save_to_excel import save_to_excel
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å save_to_excel –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    save_to_excel = None


# --- –°–ª–æ–≤–∞—Ä—å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
DEPOT_SLUGS = {
    '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'spb',
    '–º–æ—Å–∫–≤–∞': 'moscow',
    '–ø—Å–∫–æ–≤': 'pskov',
    '–º—É—Ä–º–∞–Ω—Å–∫': 'murmansk',
    '–∫–∞–∑–∞–Ω—å': 'kazan',
    '—Å–æ—á–∏': 'sochi',
    '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 'rostov-na-donu',
    '–∫–∏—Ä–∏—à–∏': 'kirishi',
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 'ekaterinburg',
    '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 'novosibirsk-all',
    '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 'krasnodar',
    '—É—Ñ–∞': 'ufa',
    '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 'krasnoyarsk-all',
    '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 'vladivostok',
    '—Ä—ã–±–∏–Ω—Å–∫': 'rybinsk',
    '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 'v-novgorod-sksavto',
    '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 'volgograd',
    '–≤–æ—Ä–æ–Ω–µ–∂': 'voronezh',
    '—Å–º–æ–ª–µ–Ω—Å–∫': 'smolensk',
    '–±—Ä—è–Ω—Å–∫': 'braynsk',
    '–≤–µ—Å—å–µ–≥–æ–Ω—Å–∫': 'vesiegonsk',
    '–∫–æ—Å—Ç—Ä–æ–º–∞': 'kostroma',
    '—è—Ä–æ—Å–ª–∞–≤–ª—å': 'yaroslavl',
}

# --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –°–õ–û–í–ê–†–¨: ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ ---
CITY_TO_STATION_ID = {
    '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 128713,
    '–º–æ—Å–∫–≤–∞': 5107,
    '–∫–∞–∑–∞–Ω—å': 85833,
    '—Å–æ—á–∏': 42622,
    '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 3536,
    '–∫–∏—Ä–∏—à–∏': 0,
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 0,
    '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 0,
    '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 131120,
    '—É—Ñ–∞': 8972,
    '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 0,
    '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 0,
    '—Ä—ã–±–∏–Ω—Å–∫': 57765,
    '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 22937,
    '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 125662,
    '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 41054,
    '–≤–æ—Ä–æ–Ω–µ–∂': 86502,
    '—Å–º–æ–ª–µ–Ω—Å–∫': 32828,
    '–±—Ä—è–Ω—Å–∫': 83646,
    '–≤–µ—Å—å–µ–≥–æ–Ω—Å–∫': 74988,
    '–∫–æ—Å—Ç—Ä–æ–º–∞': 54300,
    '—è—Ä–æ—Å–ª–∞–≤–ª—å': 3298,
    '–ø—Å–∫–æ–≤': 73707,
    '–º—É—Ä–º–∞–Ω—Å–∫': 118744,
}


def normalize_city_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."""
    cleaned = re.split(r'\s*[*]+', name.strip())[0].lower()
    replacements = {
        '—Å–ø–±': '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
        '–º—Å–∫': '–º–æ—Å–∫–≤–∞',
        '–Ω.–Ω–æ–≤–≥–æ—Ä–æ–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
        '–Ω–∏–∂–Ω–∏–π –Ω-–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
    }
    return replacements.get(cleaned, cleaned)


def parse_e_traffic(date: str, from_city: str, to_city: str) -> list[dict]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å e-traffic.ru (Selenium –≤–µ—Ä—Å–∏—è)
    """
    results = []
    from_city_norm = normalize_city_name(from_city)
    to_city_norm = normalize_city_name(to_city)

    depot_slug = DEPOT_SLUGS.get(from_city_norm)
    if not depot_slug:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω slug –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {from_city}")
        return results

    station_id = CITY_TO_STATION_ID.get(to_city_norm)
    if not station_id:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {to_city}")
        return results

    if station_id == 0:
        print(f"‚ÑπÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {from_city} ‚Üí {to_city} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ e-traffic.ru")
        return results

    try:
        dt = datetime.strptime(date, "%Y-%m-%d")
        formatted_date = dt.strftime("%d.%m.%Y")
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}")
        return results

    url = f"https://e-traffic.ru/depot/{depot_slug}/{station_id}/{formatted_date}"
    print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {url}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-web-security")
    chrome_options.add_argument("--allow-running-insecure-content")
    chrome_options.add_argument("--disable-features=VizDisplayCompositor")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--lang=ru-RU")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")

    # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    driver = webdriver.Chrome(options=chrome_options)
    wait = WebDriverWait(driver, 30)

    try:
        print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        driver.get(url)

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Å–æ–≤...")

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å —Ä–µ–π—Å–æ–º
        try:
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "div.grid-row.row")))
            print("‚úÖ –†–µ–π—Å—ã –Ω–∞–π–¥–µ–Ω—ã")
        except TimeoutException:
            if "–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" in driver.page_source:
                print("‚ÑπÔ∏è –†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.")
                return results
            print("‚ùå –†–µ–π—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
            return results

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–π—Å–∞–º–∏
        rows = driver.find_elements(By.CSS_SELECTOR, "div.grid-row.row")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Ä–µ–π—Å–æ–≤")

        for row in rows:
            try:
                # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                time_text = safe_get_text(row, "div.dispatch .time") or "N/A"
                if time_text == "N/A":
                    continue

                # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞
                trip_number = safe_get_text(row, "div.route strong") or "N/A"

                # –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫
                carrier_text = safe_get_text(row, "div.carrier.info") or "N/A"
                if "–ò–ù–ù:" in carrier_text:
                    carrier_text = carrier_text.split("–ò–ù–ù:")[0].strip().rstrip(",")

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–±—É—Å–µ
                bus_info_text = safe_get_text(row, "div.bus.info") or ""
                free_seats = "N/A"
                total_seats = "N/A"
                sold_tickets = "N/A"

                # –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
                free_match = re.search(r'—Å–≤–æ–±–æ–¥–Ω–æ:\s*(\d+\+?|\d+)', bus_info_text, re.IGNORECASE)
                if free_match:
                    free_seats = free_match.group(1)
                elif "–Ω–µ—Ç –º–µ—Å—Ç" in bus_info_text.lower() or "0" in bus_info_text:
                    free_seats = "0"

                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
                total_match = re.search(r'–ú–µ—Å—Ç:\s*(\d+)', bus_info_text, re.IGNORECASE)
                if total_match:
                    total_seats = total_match.group(1)
                else:
                    total_match = re.search(r'–ê–≤—Ç–æ–±—É—Å\s*(\d+)\s*–º–µ—Å—Ç', bus_info_text, re.IGNORECASE)
                    if total_match:
                        total_seats = total_match.group(1)

                # –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
                if total_seats.isdigit() and free_seats.isdigit():
                    sold_tickets = str(int(total_seats) - int(free_seats))

                # –¶–µ–Ω–∞
                price_text = safe_get_text(row, "div.prices .price") or "0"
                price_digits = ''.join(filter(str.isdigit, price_text))
                price = float(price_digits) if price_digits else 0.0

                results.append({
                    'time': time_text,
                    'trip_number': trip_number,
                    'departure_point': from_city,
                    'arrival_point': to_city,
                    'carrier': carrier_text,
                    'total_seats': total_seats,
                    'free_seats': free_seats,
                    'sold_tickets': sold_tickets,
                    'price': price,
                    'source': 'e-traffic'
                })

            except StaleElementReferenceException:
                print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª —É—Å—Ç–∞—Ä–µ–≤—à–∏–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                continue

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Selenium: {e}")
    finally:
        try:
            driver.quit()
        except:
            pass
        print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
    if results and save_to_excel:
        try:
            excel_filename = "data/history.xlsx"
            save_to_excel(results, filename=excel_filename, search_date=date)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {excel_filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")

    print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ e-traffic –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–π—Å–æ–≤.")
    return results


def safe_get_text(element, selector):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞."""
    try:
        el = element.find_element(By.CSS_SELECTOR, selector)
        return el.text.strip()
    except (NoSuchElementException, StaleElementReferenceException):
        return "N/A"
    except Exception:
        return "N/A"