import re
import time
from playwright.sync_api import sync_playwright, TimeoutError
from datetime import datetime

# --- –°–ª–æ–≤–∞—Ä—å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
DEPOT_SLUGS = {
    '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'spb',
    '–º–æ—Å–∫–≤–∞': 'moscow',
    '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 'veliky_novgorod',
    '–≤—ã–±–æ—Ä–≥': 'vyborg',
    '–ø—Å–∫–æ–≤': 'pskov',
    '–º—É—Ä–º–∞–Ω—Å–∫': 'murmansk',
    '–∫–∏—Ä–∏—à–∏': 'kirishi'
}

# --- –°–ª–æ–≤–∞—Ä—å ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ---
STATION_IDS = {
    ('moscow', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥'): 128713,
    ('spb', '–º–æ—Å–∫–≤–∞'): 5107,
    ('moscow', '–∫–∞–∑–∞–Ω—å'): 85833, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('moscow', '—Å–æ—á–∏'): 42622, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('spb', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É'): 3536,
    ('kirishi', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥'): 128713, #—Ç–æ–ª—å–∫–æ –∏–∑ –ö–∏—Ä–∏—à–∏ –Ω–∞ e-traffic
    ('moscow', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'): 0000, #–ù–µ—Ç –Ω–∞ e-traffic
    ('moscow', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'): 0000, #–ù–µ—Ç –Ω–∞ e-traffic
    ('moscow', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä'): 131120, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('moscow', '—É—Ñ–∞'): 8972, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('moscow', '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'): 0000, #–ù–µ—Ç –Ω–∞ e-traffic
    ('moscow', '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'): 0000, #–ù–µ—Ç –Ω–∞ e-traffic
    ('moscow', '—Ä—ã–±–∏–Ω—Å–∫'): 57765, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('spb', '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥'): 22937, # —Ç–æ–ª—å–∫–æ –∏–∑ –°–ü–± –Ω–∞ e-traffic
    ('moscow', '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥'): 125662, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('moscow', '–≤–æ–ª–≥–æ–≥—Ä–∞–¥'): 41054, # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('moscow', '–≤–æ—Ä–æ–Ω–µ–∂'): 86502,  # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('spb', '—Å–º–æ–ª–µ–Ω—Å–∫'): 32828,
    ('moscow', '–±—Ä—è–Ω—Å–∫'): 83646,  # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('spb', '–≤–µ—Å—å–µ–≥–æ–Ω—Å–∫'): 74988,
    ('moscow', '–∫–æ—Å—Ç—Ä–æ–º–∞'): 54300,  # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
    ('moscow', '—è—Ä–æ—Å–ª–∞–≤–ª—å'): 3298,  # —Ç–æ–ª—å–∫–æ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ e-traffic
}

def normalize_city_name(name: str) -> str:
    cleaned = re.split(r'\s*[*]+', name.strip())[0].lower()
    replacements = {
        '—Å–ø–±': '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
        '–º—Å–∫': '–º–æ—Å–∫–≤–∞',
        '–Ω.–Ω–æ–≤–≥–æ—Ä–æ–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
        '–Ω–∏–∂–Ω–∏–π –Ω-–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
    }
    return replacements.get(cleaned, cleaned)

def parse_e_traffic(date: str, from_city: str, to_city: str) -> list[dict]:
    results = []
    from_city_norm = normalize_city_name(from_city)
    to_city_norm = normalize_city_name(to_city)

    depot_slug = DEPOT_SLUGS.get(from_city_norm)
    if not depot_slug:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω slug –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {from_city}")
        return results

    station_id = STATION_IDS.get((depot_slug, to_city_norm))
    if not station_id:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {from_city} ‚Üí {to_city}")
        return results

    try:
        dt = datetime.strptime(date, "%Y-%m-%d")
        formatted_date = dt.strftime("%d.%m.%Y")
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}")
        return results

    url = f"https://e-traffic.ru/depot/{depot_slug}/{station_id}/{formatted_date}"
    print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {url}")

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False, slow_mo=500)
        context = browser.new_context(
            viewport={"width": 1920, "height": 1080},
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            locale="ru-RU"
        )
        page = context.new_page()

        try:
            # --- –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL ---
            page.goto(url, wait_until="networkidle")
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
            # with open("debug_e_traffic_pre_wait.html", "w", encoding="utf-8") as f:
            #     f.write(page.content())

            # --- –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ —Å —Ä–µ–π—Å–∞–º–∏ ---
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–π—Å–æ–≤...")
            max_wait = 30
            for _ in range(max_wait):
                rows = page.query_selector_all("div.grid-row.row")
                if len(rows) > 0:
                    print("‚úÖ –†–µ–π—Å—ã –Ω–∞–π–¥–µ–Ω—ã")
                    break
                if page.locator("text=–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã").is_visible():
                    print("‚ÑπÔ∏è –†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.")
                    browser.close()
                    return results
                time.sleep(1)
            else:
                print("‚ùå –†–µ–π—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
                # with open("debug_e_traffic_failed.html", "w", encoding="utf-8") as f:
                #     f.write(page.content())
                browser.close()
                return results

            # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
            rows = page.query_selector_all("div.grid-row.row")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Ä–µ–π—Å–æ–≤")

            for row in rows:
                try:
                    # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    time_elem = row.query_selector("div.dispatch .time")
                    time_text = time_elem.inner_text().strip() if time_elem else "N/A"

                    if time_text == "N/A":
                        continue

                    # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ (–≤ —Ç–µ–≥–µ <strong> –≤–Ω—É—Ç—Ä–∏ .route)
                    trip_number_elem = row.query_selector("div.route strong")
                    trip_number = trip_number_elem.inner_text().strip() if trip_number_elem else "N/A"

                    # –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫
                    carrier_elem = row.query_selector("div.carrier.info")
                    carrier_text = carrier_elem.inner_text().strip() if carrier_elem else "N/A"
                    if "–ò–ù–ù:" in carrier_text:
                        carrier_text = carrier_text.split("–ò–ù–ù:")[0].strip().rstrip(",")

                    # –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ (–≤ –±–ª–æ–∫–µ .bus.info)
                    bus_info_elem = row.query_selector("div.bus.info")
                    bus_info_text = bus_info_elem.inner_text().strip() if bus_info_elem else ""
                    free_seats = "N/A"
                    free_match = re.search(r'—Å–≤–æ–±–æ–¥–Ω–æ:\s*(\d+\+?|\d+)', bus_info_text, re.IGNORECASE)
                    if free_match:
                        free_seats = free_match.group(1)
                    elif "–Ω–µ—Ç –º–µ—Å—Ç" in bus_info_text.lower() or "0" in bus_info_text:
                        free_seats = "0"

                    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
                    total_seats = "N/A"
                    total_match = re.search(r'–ú–µ—Å—Ç:\s*(\d+)', bus_info_text, re.IGNORECASE)
                    if total_match:
                        total_seats = total_match.group(1)
                    else:
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ–±—É—Å 51 –º–µ—Å—Ç–æ"
                        total_match = re.search(r'–ê–≤—Ç–æ–±—É—Å\s*(\d+)\s*–º–µ—Å—Ç', bus_info_text, re.IGNORECASE)
                        if total_match:
                            total_seats = total_match.group(1)

                    # –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
                    sold_tickets = "N/A"
                    if total_seats.isdigit() and free_seats.isdigit():
                        sold_tickets = str(int(total_seats) - int(free_seats))

                    # –¶–µ–Ω–∞
                    price_elem = row.query_selector("div.prices .price")
                    price_text = price_elem.inner_text().strip() if price_elem else "0"
                    price_digits = ''.join(filter(str.isdigit, price_text))
                    price = float(price_digits) if price_digits else 0.0

                    results.append({
                        'time': time_text,
                        'trip_number': trip_number,
                        'departure_point': from_city,
                        'arrival_point': to_city,
                        'carrier': carrier_text,
                        'total_seats': total_seats,
                        'free_seats': free_seats,
                        'sold_tickets': sold_tickets,
                        'price': price,
                        'source': 'e-traffic'
                    })

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Playwright: {e}")
        finally:
            browser.close()


        # --- –°–û–•–†–ê–ù–ï–ù–ò–ï –í EXCEL ---
        if results:
            try:
                from utils.save_to_excel import save_to_excel
                excel_filename = "data/history.xlsx"
                save_to_excel(results, filename=excel_filename, search_date=date)
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {excel_filename}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Excel: {e}")

        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ e-traffic –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–π—Å–æ–≤.")
        return results