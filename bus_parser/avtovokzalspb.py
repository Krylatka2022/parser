# parsers/bus_parser/avtovokzalspb.py

import asyncio
import sys
import time
import os
import re
from playwright.sync_api import sync_playwright
from datetime import datetime
from utils.save_to_excel import save_to_excel


# --- –£–°–¢–ê–ù–û–í–ö–ê –ü–û–õ–ò–¢–ò–ö–ò –¶–ò–ö–õ–ê ‚Äî –°–ê–ú–ê–Ø –ü–ï–†–í–ê–Ø –°–¢–†–û–ö–ê ---
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())


# –ò–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
SOURCE_NAME = "avtovokzalspb"

# –ë–∞–∑–æ–≤—ã–π URL
BASE_URL = "https://avtovokzalspb.ru"

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL
CITY_SLUGS = {
    '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'sankt-peterburg',
    '—Å–ø–±': 'sankt-peterburg',
    '–º–æ—Å–∫–≤–∞': 'moskva',
    '–º—Å–∫': 'moskva',
    '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 'rostov-na-donu',
    '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 'velikij-novgorod',
    '–∫–∏—Ä–∏—à–∏': 'kirishi',
    '–≤—ã–±–æ—Ä–≥': 'vqborg',
    '–ø—Å–∫–æ–≤': 'pskov',
    '–º—É—Ä–º–∞–Ω—Å–∫': 'murmansk',
}


# –ö–æ–¥—ã –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª–æ–≤: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–±—ã—Ç–∏–µ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
DEPARTURE_CODES = {
    '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 76844,  # –ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª 2 (–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª)
    '–º–æ—Å–∫–≤–∞': 32749,
    '–∫–∞–∑–∞–Ω—å': 75451,
    '—Å–æ—á–∏': 32804,
    '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 32787,
    '–∫–∏—Ä–∏—à–∏': 37115,
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 25595,
    '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 37914,
    '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 27362,
    '—É—Ñ–∞': 77360,
    '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 27356,
    '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 000, # –ù–µ—Ç –Ω–∞ avtovokzal
    '—Ä—ã–±–∏–Ω—Å–∫': 15069,
    '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 37824,
    '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 32757,
    '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 24461,
    '–≤–æ—Ä–æ–Ω–µ–∂': 32674,
    '—Å–º–æ–ª–µ–Ω—Å–∫': 15267,
    '–±—Ä—è–Ω—Å–∫': 32662,
    '–≤–µ—Å—å–µ–≥–æ–Ω—Å–∫': 14698,
    '–∫–æ—Å—Ç—Ä–æ–º–∞': 14506,
    '—è—Ä–æ—Å–ª–∞–≤–ª—å': 18244,
    '–ø—Å–∫–æ–≤': 29976,
    '–º—É—Ä–º–∞–Ω—Å–∫': 000, # –ù–µ—Ç –Ω–∞ avtovokzal
    '–≤—ã–±–æ—Ä–≥': 24486,
}

ARRIVAL_CODES = {
    '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 76844,  # –ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª 2 (–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª)
    '–º–æ—Å–∫–≤–∞': 32749,
    '–∫–∞–∑–∞–Ω—å': 75451,
    '—Å–æ—á–∏': 32804,
    '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 32787,
    '–∫–∏—Ä–∏—à–∏': 37115,
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 25595,
    '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 37914,
    '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 27362,
    '—É—Ñ–∞': 77360,
    '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 27356,
    '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 000, # –ù–µ—Ç –Ω–∞ avtovokzal
    '—Ä—ã–±–∏–Ω—Å–∫': 15069,
    '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 37824,
    '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 32757,
    '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 24461,
    '–≤–æ—Ä–æ–Ω–µ–∂': 32674,
    '—Å–º–æ–ª–µ–Ω—Å–∫': 15267,
    '–±—Ä—è–Ω—Å–∫': 32662,
    '–≤–µ—Å—å–µ–≥–æ–Ω—Å–∫': 14698,
    '–∫–æ—Å—Ç—Ä–æ–º–∞': 14506,
    '—è—Ä–æ—Å–ª–∞–≤–ª—å': 18244,
    '–ø—Å–∫–æ–≤': 29976,
    '–º—É—Ä–º–∞–Ω—Å–∫': 000, # –ù–µ—Ç –Ω–∞ avtovokzal
    '–≤—ã–±–æ—Ä–≥': 24486,
}


def normalize_city_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."""
    cleaned = re.split(r'\s*[*]+', name.strip())[0].lower()
    replacements = {
        '—Å–ø–±': '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
        '–º—Å–∫': '–º–æ—Å–∫–≤–∞',
        '–Ω.–Ω–æ–≤–≥–æ—Ä–æ–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
        '–Ω–∏–∂–Ω–∏–π –Ω-–¥': '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥',
    }
    return replacements.get(cleaned, cleaned)


def convert_date_format(date_str: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç YYYY-MM-DD –≤ DD.MM.YYYY"""
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        return date_obj.strftime("%d.%m.%Y")
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
        return ""


def parse_avtovokzalspb(date: str, from_city: str, to_city: str) -> list[dict]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å avtovokzalspb.ru —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É URL.
    """
    results = []
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {SOURCE_NAME}.ru –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {from_city} ‚Üí {to_city} –Ω–∞ {date}")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤
    from_city_norm = normalize_city_name(from_city)
    to_city_norm = normalize_city_name(to_city)
    print(f"    üèôÔ∏è –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {from_city_norm} ‚Üí {to_city_norm}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    if from_city_norm == to_city_norm:
        print(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç: {from_city_norm}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return results

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–∞–≥–∏
    from_slug = CITY_SLUGS.get(from_city_norm)
    to_slug = CITY_SLUGS.get(to_city_norm)

    if not from_slug:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {from_city_norm}")
        return results
    if not to_slug:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: {to_city_norm}")
        return results

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª–æ–≤
    departure_code = DEPARTURE_CODES.get(from_city_norm)
    arrival_code = ARRIVAL_CODES.get(to_city_norm)

    if not departure_code:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è: {from_city_norm}")
        return results
    if not arrival_code:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª–∞ –ø—Ä–∏–±—ã—Ç–∏—è –¥–ª—è: {to_city_norm}")
        return results

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    formatted_date = convert_date_format(date)
    if not formatted_date:
        return results

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL
    url = f"{BASE_URL}/#/{from_slug}/{to_slug}?date={formatted_date}&departureBusStopCode={departure_code}&arrivalBusStopCode={arrival_code}"
    print(f"üåê –§–æ—Ä–º–∏—Ä—É–µ–º URL: {url}")

    with sync_playwright() as p:
        browser = None
        try:
            # –ü—É—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
            user_data_dir = os.path.join(os.getcwd(), f"user_data_{SOURCE_NAME}")
            os.makedirs(user_data_dir, exist_ok=True)
            print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {user_data_dir}")

            # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
            browser = p.chromium.launch_persistent_context(
                user_data_dir=user_data_dir,
                headless=False,
                args=[
                    '--no-sandbox',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-extensions',
                    '--disable-web-security',
                    '--lang=ru-RU'
                ],
                viewport={"width": 1280, "height": 800},
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            )

            page = browser.pages[0]
            page.set_default_navigation_timeout(60000)
            page.set_default_timeout(30000)

            # –ê–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç
            page.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', { get: () => false });
                window.chrome = { runtime: {} };
                Object.defineProperty(navigator, 'languages', { get: () => ['ru-RU', 'ru', 'en-US', 'en'] });
                Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
            """)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page.goto(BASE_URL, wait_until="networkidle")
            time.sleep(2)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É URL
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É URL...")
            page.goto(url)

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
            try:
                # –ñ–¥—ë–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö—ç—à–∞
                page.wait_for_function(
                    "() => window.location.hash.startsWith('#/') && window.location.href.includes('date=')",
                    timeout=30000
                )
                print("‚úÖ URL –æ–±–Ω–æ–≤–ª—ë–Ω")

                # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                page.wait_for_selector(".bus-cards, .bus-was-found__title", timeout=20000)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ä–µ–π—Å—ã?
                card_count = len(page.query_selector_all(".bus-card"))
                if card_count == 0:
                    if page.locator("text=–†–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ").count() > 0 or \
                       page.locator("text=–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ").count() > 0:
                        print("‚ÑπÔ∏è –†–µ–π—Å–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        return results
                    raise TimeoutError("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω, –Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–π—Å–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {card_count} —Ä–µ–π—Å–æ–≤")

            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                _save_debug_page(page, SOURCE_NAME)
                return results

            # === –ü–ê–†–°–ò–ù–ì –ö–ê–†–¢–û–ß–ï–ö –†–ï–ô–°–û–í ===
            cards = page.query_selector_all(".bus-card")
            print(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫...")

            for idx, card in enumerate(cards, 1):
                try:
                    # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    time_elem = card.query_selector(".bus-track-info__time")
                    time_text = time_elem.inner_text().strip() if time_elem else "N/A"

                    # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞
                    trip_number = "N/A"
                    trip_value_elem = card.query_selector(".bus-carrier-info__value")
                    if trip_value_elem:
                        full_text = trip_value_elem.inner_text().strip()
                        match = re.search(r'\d+', full_text)
                        trip_number = match.group(0) if match else "N/A"

                    # –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º locator –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫
                    carrier = "N/A"
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º locator –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
                        label = card.locator("text=–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫:")
                        if label.count() > 0:
                            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π span
                            value = label.locator("xpath=..//following-sibling::span")
                            if value.count() > 0:
                                carrier = value.first.inner_text().strip()
                    except:
                        pass

                    # –†–µ–∑–µ—Ä–≤: –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ .bus-carrier-info__value
                    if carrier == "N/A":
                        values = card.query_selector_all(".bus-carrier-info__value")
                        for el in values:
                            txt = el.inner_text().strip()
                            if any(kw in txt for kw in ["–û–û–û", "–ê–û", "–§–¢–ö", "–°–æ—Ç—Ä–∞–Ω—Å", "–ö—Ä—É–∏–∑", "–¢—Ä–∞–Ω—Å", "–ê–≤—Ç–æ—Ç—É—Ä", "–û–û–û", "–ò–ü"]):
                                carrier = txt
                                break

                    # –¶–µ–Ω–∞
                    price_elem = card.query_selector(".bus-carrier-info__price-value")
                    price_text = price_elem.inner_text().strip() if price_elem else "0"
                    price = 0.0
                    try:
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
                        clean_price = re.sub(r'[^\d.]', '', price_text)
                        price = float(clean_price) if clean_price else 0.0
                    except:
                        price = 0.0

                    # –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
                    free_seats = "N/A"
                    seats_elem = card.query_selector(".bus-carrier-info__text")
                    if seats_elem:
                        seats_text = seats_elem.inner_text().strip()
                        match = re.search(r'(\d+)', seats_text)
                        free_seats = match.group(1) if match else "N/A"

                    total_seats = "N/A"
                    sold_tickets = "N/A"

                    result = {
                        'time': time_text,
                        'trip_number': trip_number,
                        'departure_point': from_city,
                        'arrival_point': to_city,
                        'carrier': carrier,
                        'total_seats': total_seats,
                        'free_seats': free_seats,
                        'sold_tickets': sold_tickets,
                        'price': price,
                        'source': SOURCE_NAME
                    }

                    results.append(result)
                    print(f"  ‚úÖ –†–µ–π—Å {idx}: {time_text} | {carrier} | {price} ‚ÇΩ | {free_seats} –º–µ—Å—Ç")

                except Exception as e:
                    print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {idx}: {e}")
                    continue

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
            _save_debug_page(page, SOURCE_NAME)
        finally:
            if browser:
                browser.close()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
    if results:
        excel_filename = "data/history.xlsx"
        save_to_excel(results, filename=excel_filename, search_date=date)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(results)} —Ä–µ–π—Å–æ–≤")

    print(f"üèÅ –ü–∞—Ä—Å–∏–Ω–≥ {SOURCE_NAME} –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ä–µ–π—Å–æ–≤.")
    return results


def _save_debug_page(page, source: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"data/debug_{source}_{timestamp}.html"
        os.makedirs("data", exist_ok=True)
        with open(filename, "w", encoding="utf-8") as f:
            f.write(page.content())
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –¥–µ–±–∞–≥-—Ñ–∞–π–ª: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ–±–∞–≥-—Ñ–∞–π–ª–∞: {e}")